services:
  app:
    build: .
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=${DB_HOST}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_PORT=${DB_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - GIN_MODE=release
    depends_on:
      migrate:
        condition: service_completed_successfully
    volumes:
      - app_data:/app/data # Persistent volume for app data
    networks:
      - myapp-network

  postgres:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persistent volume for database
    networks:
      - myapp-network

  ## ensure that migrations are run before the app starts
  migrate:
    image: golang:1.22-alpine
    working_dir: /app
    command: sh -c "go mod download && go run database/migrations/migrations.go"
    environment:
      - DB_HOST=${DB_HOST}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_PORT=${DB_PORT}
    volumes:
      - .:/app # Maps local directory to container
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - myapp-network

volumes:
  postgres_data: # Persistent volume for PostgreSQL data
  app_data: # Persistent volume for application data

networks:
  myapp-network:
    driver: bridge
